define(["Libras"],function(e){"use strict";var t=e.BoundingSphere,i=(e.Cartesian2,e.Cartesian3,e.Cartographic,e.Color),n=e.ComponentDatatype,o=e.defineProperties,r=e.Event,a=e.Geometry,s=e.GeometryAttribute,c=e.GeometryInstance,l=(e.IntersectionTests,e.Math,e.Matrix4),p=e.PrimitiveType,u=(e.Ray,e.TaskProcessor),h=e.Appearance,m=e.BlendingState,v=(e.HorizontalOrigin,e.Primitive);e.VerticalOrigin;function _(e){this._viewer=e,this._zFactor=0,this._geoPolygon=void 0,this._sampleGap=1,this._percentage=0,this._fillVolume=0,this._cutVolume=0,this._vertice=void 0,this._matLocal=new l,this._matLocalInvert=new l,this._completeEvent=new r,this.primitive=null,this.primitive1=null,this.taskProcessor=new u("computeCutFill",Number.POSITIVE_INFINITY)}return o(_.prototype,{vertice:{get:function(){return this._vertice},set:function(e){this._vertice=e}},matLocal:{get:function(){return this._matLocal},set:function(e){this._matLocal=e}},completeEvent:{get:function(){return this._completeEvent}},matLocalInvert:{get:function(){return this._matLocalInvert},set:function(e){this._matLocalInvert=e}},zFactor:{get:function(){return this._zFactor},set:function(e){this._zFactor=e}},polygon:{get:function(){return this._geoPolygon},set:function(e){this._geoPolygon=e}},sampleGap:{get:function(){return this._sampleGap},set:function(e){this._sampleGap=e}},fillVolume:{get:function(){return this._fillVolume}},cutVolume:{get:function(){return this._cutVolume}}}),_.prototype.apply=function(){var e=this;return this.taskProcessor.scheduleTask({geoPolygon:this._geoPolygon,sampleGap:this._sampleGap,matLocalInvert:this.matLocalInvert,vertice:this._vertice,matLocal:this.matLocal,zFactor:this._zFactor}).then(function(o){for(var r=o.hightFill,l=o.hightCut,u=o.pointsLine,_=o.pointsLine1,g=i.fromBytes(255,0,0,255),y=i.fromBytes(0,255,0,255),f="attribute vec3 position3DHigh;attribute vec3 position3DLow; attribute vec4 color;         attribute float batchId;      varying vec4 v_color;                                  void main()                                           {                                                        vec4 p = czm_computePosition();                       v_color =color;                                       p = czm_modelViewProjectionRelativeToEye * p;         gl_Position = p;                                      gl_PointSize=10.0;                                 } ",d="varying vec4 v_color;     void main()               {                            gl_FragColor = v_color;}",L=[],w=[],P=[],I=[],b=[],S=[],A=0;A<u.length;A++)L.push(u[A].x,u[A].y,u[A].z),P.push(g.red,g.green,g.blue,g.alpha),w.push(A);for(A=0;A<_.length;A++)I.push(_[A].x,_[A].y,_[A].z),S.push(y.red,y.green,y.blue,y.alpha),b.push(A);if(L.length>1){var E=new a({attributes:{position:new s({componentDatatype:n.DOUBLE,componentsPerAttribute:3,values:new Float64Array(L)}),color:new s({componentDatatype:n.FLOAT,componentsPerAttribute:4,values:new Float32Array(P)})},indices:new Int32Array(w),primitiveType:p.LINES,boundingSphere:t.fromVertices(L)}),F=new h({renderState:{blending:m.PRE_MULTIPLIED_ALPHA_BLEND,depthTest:{enabled:!0},depthMask:!0},fragmentShaderSource:d,vertexShaderSource:f});e.primitive=e._viewer.scene.primitives.add(new v({geometryInstances:new c({geometry:E}),appearance:F,asynchronous:!1}))}if(I.length>1){var T=new a({attributes:{position:new s({componentDatatype:n.DOUBLE,componentsPerAttribute:3,values:new Float64Array(I)}),color:new s({componentDatatype:n.FLOAT,componentsPerAttribute:4,values:new Float32Array(S)})},indices:new Int32Array(b),primitiveType:p.LINES,boundingSphere:t.fromVertices(I)}),V=new h({renderState:{blending:m.PRE_MULTIPLIED_ALPHA_BLEND,depthTest:{enabled:!0},depthMask:!0},fragmentShaderSource:d,vertexShaderSource:f});e.primitive1=e._viewer.scene.primitives.add(new v({geometryInstances:new c({geometry:T}),appearance:V,asynchronous:!1}))}var D=o.areaSample;for(A=0;A<r.length;A++)e._fillVolume+=D*r[A];for(A=0;A<l.length;A++)e._cutVolume+=D*l[A];e._completeEvent.raiseEvent()})},_.prototype.clear=function(){this._viewer.scene.primitives.remove(this.primitive),this._viewer.scene.primitives.remove(this.primitive1),this._fillVolume=0,this._cutVolume=0},_});